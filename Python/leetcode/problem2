"""
Problem2: Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
"""

"""
Approach
1. Use pointers to iterate each of the linked list
2. remainder is used to add a node to output linked list
3. carry is used to add with sum in subsequent node in output linked list
4. sometimes carry is left while addition which is edge case to be considered
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        if not l1:
            return l2
        
        if not l2:
            return l1
        
        newNode = ListNode(-1)
        current = newNode
        carry = 0
        while(l1 or l2):
            if not l1:
                sumValue = (l2.val + carry)
                l2 = l2.next
            elif not l2:
                sumValue = (l1.val + carry)
                l1 = l1.next
            else:
                sumValue = (l1.val + l2.val + carry)
                l1 = l1.next
                l2 = l2.next
                
            value = sumValue%10
            carry = sumValue//10
            current.next = ListNode(value)
            current = current.next
            
        if carry != 0:
            current.next = ListNode(carry) 
        
        return newNode.next
