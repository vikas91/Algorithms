"""
Problem 11: Container With Most Water
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

Input: [1,8,6,2,5,4,8,3,7]
Output: 49
"""
"""
Approach:
1. We use two pointer approach to keep track of maximum area. Note that the lower of the two index values contribute to area so we always move the pointers in direction of lower value.
2. high pointer starts at last index, low pointer starts at begining index of array.
3. continue until low pointer doesnt exceed higher pointer

Time Complexity: O(n)
Space Complexity: O(1)
"""

class Solution:
    def maxArea(self, height: List[int]) -> int:
        if not height:
            return 0
        
        low = 0
        high = len(height)-1
        maxArea = 0
        while(low<=high):
            maxArea = max(maxArea, (high-low)*min(height[low], height[high]))
            if height[low]<= height[high]:
                low +=1
            else:
                high -=1
        return maxArea




