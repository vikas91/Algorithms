"""
Problem 15: 3sum
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
"""
"""
Approach:
1. We sort the input array and use two pointer approach to get the sum equal to - third value
2. index of i ranges from 0 to len(nums)-2
3. for two sum problem index of low ranges from i+1
4. we need to ensure checking for duplicates by skipping indexes if next is same as current 
"""
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        if len(nums)<3:
            return []
        
        nums.sort()
        i = 0
        output = []
        while(i<len(nums)-2):
            low = i+1
            high = len(nums)-1
            while(low<high):
                value = nums[i] + nums[low] + nums[high]
                if value == 0:
                    output.append([nums[i], nums[low], nums[high]])
                    while(low<high and nums[low]==nums[low+1]):
                        low += 1
                        
                    low += 1
                    high -= 1
                elif value < 0 :
                    low +=1
                else:
                    high -=1
           
            while(i<len(nums)-2 and nums[i]==nums[i+1]):
                i+=1
                
            i+=1
            
        return output

