"""
Problem4: Find  median of two sorted arrays
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
"""

"""
Approach:
1. Use Binary search to find an index in smaller array.
2. In order to find an index Partition the arrays into two parts such that sum of first partitions size is same as sum of second partitions size. i.e divide into two halfs
3. If min of second partition of first array is smaller than max element in first partion of second array increment the index
4. If max of first partition of first array is greater than min element in second partion of second array decrement the index
5. If its an odd length return max of left partitions else return the average of max of left partitions and min of right partitions 

Time Complexity: O(lg(min(len1, len2)))
Space Complexity: O(1)
"""

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        len1 = len(nums1)
        len2 = len(nums2)
        
        if len2<len1:
            nums2,len2,nums1,len1 = nums1,len1,nums2,len2
            
        minLength = 0
        maxLength = len1
        midLength = (len1+len2+1)//2
        
        while(minLength<=maxLength):
            i = (minLength+maxLength)//2
            j = midLength-i
            
            if i<len1 and nums2[j-1]>nums1[i]:
                minLength = i+1
                
            elif i>0 and nums1[i-1]>nums2[j]:
                maxLength = i-1
            
            else:
                if i == 0:
                    maxLeft = nums2[j-1]
                elif j == 0:
                    maxLeft = nums1[i-1]
                else:
                    maxLeft = max(nums1[i-1], nums2[j-1])
                
                if (len1+len2)%2 == 1:
                    return maxLeft
                
                if i == len1:
                    minRight = nums2[j]
                elif j == len2:
                    minRight = nums1[i]
                else:
                    minRight = min(nums1[i], nums2[j])
                    
                return (maxLeft + minRight)/2
            
        

